(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{217:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-hooks","aria-hidden":"true"}},[t._v("#")]),t._v(" Git Hooks")]),t._v(" "),a("p",[t._v("很多时候，项目没有建设 "),a("code",[t._v("ci/cd")]),t._v("，仅凭写代码的时候通过 "),a("code",[t._v("IDE")]),t._v(" 做 "),a("code",[t._v("lint")]),t._v(" 检查，是很容易上传不规范的代码的。所以这里利用 "),a("code",[t._v("git hooks")]),t._v(" 在提交之前会做一次 "),a("code",[t._v("lint")]),t._v(" 检查。")]),t._v(" "),a("h2",{attrs:{id:"husky"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#husky","aria-hidden":"true"}},[t._v("#")]),t._v(" husky")]),t._v(" "),a("p",[t._v("一般我们不会手动更改 "),a("a",{attrs:{href:"https://github.com/observing/pre-commit",target:"_blank",rel:"noopener noreferrer"}},[t._v("pre-commit"),a("OutboundLink")],1),t._v("，而且修改后，没有办法加入 "),a("code",[t._v("git")]),t._v(" 版本控制之中。这里使用 "),a("a",{attrs:{href:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/typicode/husky"),a("OutboundLink")],1),t._v(" 去做这件事。安装后，修改 "),a("code",[t._v("package.json")]),t._v("，增加配置：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"husky"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hooks"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pre-commit"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint ./src/**/*.{js,vue}"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"lint-staged"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lint-staged","aria-hidden":"true"}},[t._v("#")]),t._v(" lint-staged")]),t._v(" "),a("p",[t._v("可以仔细观察上面的命令，会发现每次它都检查整个目录，但实际我们大部分时间只会修改部分代码。所以从一个方面来说，对整个目录的检查是没有必要的，另一方面来说，万一别人的代码出了错，会导致自己无法提交。为了解决这个问题，这里采用了 "),a("a",{attrs:{href:"https://github.com/okonet/lint-staged",target:"_blank",rel:"noopener noreferrer"}},[t._v("lint-staged"),a("OutboundLink")],1),t._v(" 这个库。它只会校验检查你提交的部分内容。安装后，修改 "),a("code",[t._v("package.json")]),t._v(" 配置：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"husky"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hooks"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pre-commit"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lint-staged"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lint-staged"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*.{js,vue}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run lint -- --fix"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("对于能自动修复的 "),a("code",[t._v("eslint")]),t._v(" 错误，它会静默的帮你修复。对于不能修复的错误，会在控制台打印错误信息，阻止提交，后续只需要按照要求修复重新提交即可。")])])}),[],!1,null,null,null);s.default=e.exports}}]);